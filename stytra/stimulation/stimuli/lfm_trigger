try:
    import nidaqmx
except:
    pass
from stytra.stimulation.stimuli import Stimulus

class NIVoltageStimulus(Stimulus):
    def __init__(self, *args, dev="Dev2", chan="ao1"):

        self.dev = dev
        self.chan = chan


class SetVoltageStimulus(NIVoltageStimulus):
    def __init__(self, *args, voltage=0.0, **kwargs):
        self.voltage = voltage
        super().__init__(*args, **kwargs)

    def start(self):
        with nidaqmx.Task() as task:
            task.ao_channels.add_ao_voltage_chan("{}/{}".format(self.dev, self.chan), 'lfm_trigger',0,5)
            print('1 Channel 1 Sample Write: ')
            task.write(self.voltage)


if __name__ == "__main__":
    stim = SetVoltageStimulus(voltage=0.0)
    stim.start()
    print("sending pulse")
